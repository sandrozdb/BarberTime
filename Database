CREATE DATABASE IF NOT EXISTS sistema_barbearia;
USE sistema_barbearia;

CREATE TABLE Usuario (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(100) NOT NULL,
    cpf_cnpj VARCHAR(20) NOT NULL UNIQUE,
    tipo ENUM('cliente', 'profissional') NOT NULL,
    nivel_acesso ENUM('dono', 'barbeiro') DEFAULT NULL,
    telefone VARCHAR(20)
);

CREATE TABLE Barbearia (
    id_barbearia INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cnpj VARCHAR(20) NOT NULL UNIQUE,
    endereco VARCHAR(200),
    telefone VARCHAR(20),
    dono_id INT,
    FOREIGN KEY (dono_id) REFERENCES Usuario(id_usuario)
);

CREATE TABLE Barbeiros_Barbearias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    barbeiro_id INT NOT NULL,
    barbearia_id INT NOT NULL,
    FOREIGN KEY (barbeiro_id) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (barbearia_id) REFERENCES Barbearia(id_barbearia)
);

CREATE TABLE Servico (
    id_servico INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL
);

CREATE TABLE Barbearia_Servicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    barbearia_id INT NOT NULL,
    servico_id INT NOT NULL,
    preco DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (barbearia_id) REFERENCES Barbearia(id_barbearia),
    FOREIGN KEY (servico_id) REFERENCES Servico(id_servico)
);

CREATE TABLE Agendamento (
    id_agendamento INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    barbeiro_id INT NOT NULL,
    barbearia_id INT NOT NULL,
    data DATE NOT NULL,
    hora TIME NOT NULL,
    status ENUM('confirmado', 'cancelado', 'concluido') DEFAULT 'confirmado',
    FOREIGN KEY (cliente_id) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (barbeiro_id) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (barbearia_id) REFERENCES Barbearia(id_barbearia)
);

CREATE TABLE Agendamento_Servicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    agendamento_id INT NOT NULL,
    servico_id INT NOT NULL,
    FOREIGN KEY (agendamento_id) REFERENCES Agendamento(id_agendamento),
    FOREIGN KEY (servico_id) REFERENCES Servico(id_servico)
);

SELECT 
    a.id_agendamento,
    cliente.nome AS nome_cliente,
    barbeiro.nome AS nome_barbeiro,
    b.nome AS nome_barbearia,
    a.data,
    a.hora,
    a.status,
    GROUP_CONCAT(s.nome SEPARATOR ', ') AS servicos
FROM 
    Agendamento a
JOIN 
    Usuario cliente ON a.cliente_id = cliente.id_usuario
JOIN 
    Usuario barbeiro ON a.barbeiro_id = barbeiro.id_usuario
JOIN 
    Barbearia b ON a.barbearia_id = b.id_barbearia
LEFT JOIN 
    Agendamento_Servicos ags ON a.id_agendamento = ags.agendamento_id
LEFT JOIN 
    Servico s ON ags.servico_id = s.id_servico
GROUP BY 
    a.id_agendamento,
    cliente.nome,
    barbeiro.nome,
    b.nome,
    a.data,
    a.hora,
    a.status;
